from tensorflow.python.keras.preprocessing.image import ImageDataGenerator
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Conv2D, MaxPooling2D
from tensorflow.python.keras.layers import Activation, Dropout, Flatten, Dense
import keras
from keras.models import model_from_yaml
import tensorflow as tf

import shutil
import os

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

train_dir = 'train'
val_dir = 'val'
test_dir = 'test'
img_width, img_height = 32, 32
input_shape = (img_width, img_height, 3)
epochs = 100
batch_size = 3
nb_train_samples = 13
nb_validation_samples = 4
nb_test_samples = 4

def create_directory(dir_name):
    if os.path.exists(dir_name):
        shutil.rmtree(dir_name)
    os.makedirs(dir_name)
    os.makedirs(os.path.join(dir_name, "in"))
    os.makedirs(os.path.join(dir_name, "out"))

create_directory(train_dir)
create_directory(val_dir)
create_directory(test_dir)

!cp -r gdrive/MyDrive/datasets/in_out_t/test/in test
!cp -r gdrive/MyDrive/datasets/in_out_t/test/out test
!cp -r gdrive/MyDrive/datasets/in_out_t/train/in train
!cp -r gdrive/MyDrive/datasets/in_out_t/train/out train
!cp -r gdrive/MyDrive/datasets/in_out_t/val/in val
!cp -r gdrive/MyDrive/datasets/in_out_t/val/out val

model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(3, 3)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='mean_squared_error',
              optimizer='adam',
              metrics=['accuracy'])

datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = datagen.flow_from_directory(
    train_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

val_generator = datagen.flow_from_directory(
    val_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

test_generator = datagen.flow_from_directory(
    test_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

model.fit_generator(
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=val_generator,
    validation_steps=nb_validation_samples // batch_size)

scores = model.evaluate_generator(test_generator, nb_test_samples // batch_size)
